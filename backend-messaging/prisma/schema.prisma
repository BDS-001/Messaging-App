// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String    
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  
  // Relations
  participatedConversations ConversationParticipant[]
  sentMessages              Message[] @relation("UserToMessage")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  type      String    // 'one_on_one' or 'group'
  name      String?   // null for one-on-one conversations
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations with CASCADE delete
  participants ConversationParticipant[] @relation("ConversationToParticipant", onDelete: Cascade)
  messages     Message[]                @relation("ConversationToMessage", onDelete: Cascade)
}

model ConversationParticipant {
  id             Int        @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime   @default(now())
  lastClearedAt  DateTime?
  
  // Relations
  conversation  Conversation @relation("ConversationToParticipant", fields: [conversationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  
  // Ensure a user can only be in a conversation once
  @@unique([conversationId, userId])
}

model Message {
  id             Int          @id @default(autoincrement())
  conversationId Int          
  senderId       Int          
  content        String
  sentAt         DateTime     @default(now())
  isDeleted      Boolean      @default(false)
  
  // Relations
  conversation  Conversation @relation("ConversationToMessage", fields: [conversationId], references: [id])
  sender        User         @relation("UserToMessage", fields: [senderId], references: [id])
  
  @@index([conversationId])
  @@index([senderId])
}