// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @unique
  email      String    @unique
  password   String    
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted  Boolean   @default(false)
  deletedAt  DateTime?
  
  // Relations
  participatedChats ChatParticipant[]
  sentMessages      Message[] @relation("UserToMessage")
  
  // Contact relations
  contacts     Contact[] @relation("UserContacts")
  contactOf    Contact[] @relation("ContactOf")
}

model Chat {
  id        Int       @id @default(autoincrement())
  type      String    // 'one_on_one' or 'group'
  name      String?   // null for one-on-one conversations
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  participants ChatParticipant[] @relation("ChatToParticipant")
  messages     Message[]         @relation("ChatToMessage")
}

model ChatParticipant {
  id           Int        @id @default(autoincrement())
  chatId       Int
  userId       Int
  joinedAt     DateTime   @default(now())
  lastClearedAt DateTime?
  
  // Relations with CASCADE delete
  chat        Chat       @relation("ChatToParticipant", fields: [chatId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])
  
  // Ensure a user can only be in a chat once
  @@unique([chatId, userId])
}

model Message {
  id       Int      @id @default(autoincrement())
  chatId   Int          
  senderId Int          
  content  String
  sentAt   DateTime @default(now())
  updatedAt  DateTime  @updatedAt
  isDeleted Boolean  @default(false)
  deletedAt  DateTime?
  
  // Relations with CASCADE delete
  chat     Chat     @relation("ChatToMessage", fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation("UserToMessage", fields: [senderId], references: [id])
  
  @@index([chatId])
  @@index([senderId])
}

model Contact {
  id          Int       @id @default(autoincrement())
  userId      Int
  contactId   Int
  nickname    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user        User      @relation("UserContacts", fields: [userId], references: [id])
  contact     User      @relation("ContactOf", fields: [contactId], references: [id])
  
  // Ensure a contact relationship exists only once
  @@unique([userId, contactId])
}